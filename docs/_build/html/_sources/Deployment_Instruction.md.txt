<img src="assets/configguanaco.png" width="100">

# Instruction for Using GUANACO 

After getting an understanding of what GUANACO is and what it does, here is the step-by-step instruction on how to use and run GUANACO successfully:  
 * The first thing the user needs is to create the AnnData (h5ad) or MuuData(h5mu) file of their experiment to visualize the single cell RNA data (if annotation is present, else not required)
 * The user can also create a BigWig file for visualizing their open chromatin regions (if applicable). To run GUANACO either of the Annotation file or the BigWig file must be present.
 * The user needs to create the config.json file properly following the instruction below 
 * Finally, the user can wrap everything in the Json file (updating information if needed) and run the app using system's Python or using Docker 



## Configuring Json File

An example Json file has been provided in the git repository for user’s convenience, which looks like this:

<figure>
<img src="assets/ConfigJson.png" width="750">
<figcaption>Figure 1: Config file Snippet</figcaption>
</figure>

This config file can be edited the following way: 

 1. The user will be able to set the title of their Study in the “Study Name” place, depending on their dataset. [This field is mandatory and must be present, as the Nav-bar tabs is dependent on this field] 
 2. The “sc_data” row must contain the exact name of the AnnData or MuuData dataset that is to be used, and this dataset must be saved in any folder. [This field is mandatory if the user wants to visualize the Gene Expression] 
 3. The “description” row can be used to write the description of the study, and this is an optional field, although it is recommended to be added. 
 4. The “markers” row contains the important marker genes of the study. This field is important for visualization of the heatmap, dot plot, violin plot, stacked bar and pseudo time plot. However, it is not a required field and if the markers are not mentioned, the dropdown will show the top 6 genes, and the user can search for the relevant genes if needed.  
 5. The bucket_urls contains the link to the BigWig file for the ATAC seq (chromatin peaks in the IGV browser), it is advised to upload the data in an s3 bucket, as it is easier to call and doesn’t have restrictive size requirement. However, this is not compulsory in general, and the user can keep this field empty if there is no BigWig file for their data. 

    **Note:** The user can also follow the instructions provided in this link https://atacchloe.s3.eu-north-1.amazonaws.com.  
 6. The name for the ATAC track, the genome name for the ATAC sequences, and the max height of the browser can also be set. However, if the user has the BigWig file, these are important to mention as well as the bucket_urls. 
 7. Several ATAC seq tracks can be added as well, just follow the below given format:
    ```
     "bucket_urls": ["https://atacchloe.s3.eu-north-1.amazonaws.com/abc", "https://atacchloe.s3.eu-north-1.amazonaws.com/xyz", .......], 
     "ATAC_name": ["Track1", "Track2", .......], 
     "genome": "hg38", 
     "max_height": [10, 20, ......] 
    ```
 8. If there is no ATAC-seq available for the provided dataset, user can simply remove the "bucket_urls", "ATAC_name", "genome" and "max_height" from the Json file. 
 9. Custom colors can also be set for the labels and clusters, following the hash code of the colors in the “color” section. 
 10. Several Datasets can be added the same way by the following way: 
     ```
     { 
        "Study1": { 
        "sc_data": --------- 
        }, 
     
        "Study2": { 
        "sc_data": --------- 
        }, 
     
        "color": [  
         ------- 
        ]
     }
     ```
    
     and so on...
 11. If the user only wants to visualize the BigWig, they do not need an input for the sc_data and markers

 Once the config file is set, the AnnData file and the BigWig file are created, then GUANACO, with user’s data can easily be accessed locally or deployed on any server. The information will be displayed in the marked places of the platform as shown in Figure 2.1, Figure 2.2, and Figure 2.3. 

<figure>
<img src="assets/Figure 2.1.png" width="600">
<figcaption>Figure 2.1</figcaption>
</figure>

<br>

<figure>
<img src="assets/Figure 2.2.png" width="600">
<figcaption>Figure 2.2</figcaption>
</figure>

<br>

<figure>
<img src="assets/Figure 2.3.png" width="600">
<figcaption>Figure 2.3</figcaption>
</figure>


Once the json file is made, we are offering users two ways to deploy and access GUANACO; one version is running GUANACO from console using system's Python, and another one is with Docker. 

<br>

<div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 5px; align-items: center;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
</div>

<br>

## Running GUANACO

### Running from Console using system's Python:

#### Run Locally
To run GUANCO Locally follow the following steps: 

To run and install GUANACO, only changes need to be made in the Json file and the AnnData or MuuData needs to be stored in the said folder as stated above. User also needs to make sure a stable version of Python is installed in their local machine, precisely a version of Python 3.10 or higher, if not please install Python first, then follow the mentioned steps using the terminal:

**Step 1. Clone the repository** 

````
git clone https://github.com/Systems-Immunometabolism-Lab/guanaco-viz 

cd guanaco-viz 
````
It is advised to keep the Json file, and data inside this folder

<br>

**Step 2. Create a virtual environment for python** 

Create the virtual environment:
````
python –m venv myenv  
````
Or (depending on the python and OS version)

````
python3 –m venv myenv 
````
Then activate it:<br>

````
source myenv/bin/activate
````
Or For Windows
````
myenv\Scripts\activate
````
<br>

<u><b>If the user is using Conda follow the following commands:</b></u> 
````
conda create -n guanaco-env 

conda activate guanaco-env
````

<br>

<u><b>If the user is using Pixi follow the following commands:</b></u>
````
python –m venv pixienv  
````
Or (depending on the python and OS version)

````
python3 –m venv pixienv 
````
<br>

````
source pixienv/bin/activate
````
Or For Windows
````
pixienv\Scripts\activate
````
or 
````
pixienv\Scripts\Activate.ps1
````
<br>

**Step 3. Install from local directory**

```
pip install . 
```

or 

```
pip install –e . 
```

(for development (editable install)) 

or 

Install from distribution files if the user has the wheel file: 

```
pip install dist/guanaco_viz-0.1.0-py3-none-any.whl 
```

**Step 4. Run GUANACO**

````
guanaco -c your_config.json 
````

Along with this Json File the user can also mention the following changes, if anything different the user prefers: 

 * `guanaco -h` If the user needs any help
 * `guanaco -d DATA_DIR` If the user doesn’t have their data in the current directory but somewhere else, they can specify using this command: `guanaco -c your_config.json -d your_datadirectory`
 * `guanaco -p PORT` If the user wants to run GUANACO in a different Port than the specified 4399 or run multiple instances of GUANACO simultaneously maybe with different config files, users can run it the following way: `guanaco -c your_2ndconfig.json -p your_newport`
 *  `guanaco --host HOST`  If the user wants to run GUANACO using a different IP other than the default 0.0.0.0, they can do it the following way: `guanaco -c your_2ndconfig.json --host your_newhost`
 * `guanaco --debug` If in any case the user wants to understand and/or report any error they face for guanaco 
 * `guanaco --max-cells MAX_CELLS` This is because GUANACO by default, down samples data to only the top 8k cells, however, if the dataset has more than the mentioned number of cells, the user will definitely need to specify the total number of cells here in this format `guanaco -c your_2ndconfig.json --max-cells 10000`, this configuration is done to save memory consumption 
 * `guanaco --seed SEED` Here the seed can be set for sub sampling of the cells
 * `guanaco --backed-mode` For heavy dataset this is recommended, else the app may crash depending on the RAM of the device. However, we would recommend this command for running GUANACO in general more efficiently `guanaco -c your_config.json -d your_datadirectory --backed-mode`. There is no need to use `--max-cells`if GUANACO is run using the `--backed-mode`

   Users can use all the help at once like `guanaco -c your_config.json -d your_datadirectory -p your_newport –host yournewhost –seed 10 –debug --backed-mode`. However, the users cannot use just the command `guanaco` to run GUANACO because guanaco needs a config file to run properly.  

<br>

**Or The User can also directly use our already made package** 

````
pip install guanaco 

guanaco -d your_datadirectory -c your_config.json --backed-mode  
````

**Note:** it is advised to keep the data file and the config file in the same directory in this case


The application will be running in http://0.0.0.0:4399/ 

There will also some other address provided to run the file locally in, user can choose either: 

<figure>
<img src="assets/Figure 3.png" width="300">
<figcaption>Figure 3: Mapping address</figcaption>
</figure>

<br>

<div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; align-items: center;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
</div>

<br>

#### Deploy in Server 

To deploy GUANCO in the users AWS or any other Cloud Server follow the following steps: 

To run and install GUANACO, only changes need to be made in the Json file and the AnnData or MuuData needs to be stored in the said folder as stated above.

Please note that the user must connect to their server for deployment. Connection can be made to the server using the following command (this depends completely on the server) 

`ssh -i ~/filepath/my-aws-key.pem instance-name@<EC2_PUBLIC_IP>`

**Note:** The instance name is mostly the name of the OS image used for the server like ubuntu or ec2-user for linux, in this case ubuntu is much preferable as it comes with updated version of python, however this again depends on the server operator 

[This is Optional] User can also add NGINX as an added layer of security if not already done, however, NGINX is highly recommended for URL configuration and also if the link is shared with others

User also needs to make sure a stable version of Python is installed in the server, precisely a version of Python 3.10 or higher, if a lower version of Python is available it is advised to update the python version, then follow the mentioned steps using the terminal: 


**Step 1. Clone the repository** 

````
git clone https://github.com/Systems-Immunometabolism-Lab/guanaco-viz 

cd guanaco-viz 
````
It is advised to keep the Json file, and data inside this folder. The users can upload the files in the server using terminal command: `scp -i /path/to/your-key.pem /path/to/your/file ubuntu@EC2_PUBLIC_IP:/home/ubuntu/` or manual uploading through the interface. However, if the user is copying the repository in the server from interface, make sure the Json file and the AnnData in the folder as mentioned above. 

<br>

**Step 2. Create a virtual environment for python** 

```
python –m venv myenv
```

Or, depending on the python version

```
python3 –m venv myenv 
```

Or, if the instance default python is lower than 3.10, it is recommended to install a higher version and use this 

```
python3.10 –m venv myenv  
```
<br>

```
source myenv/bin/activate
```

<br>

<u><b>If the user is using Conda follow the following commands:</b></u> 
````
conda create -n guanaco-env 

conda activate guanaco-env
````

<br>

<u><b>If the user is using Pixi follow the following commands:</b></u>
````
python –m venv pixienv  
````
Or (depending on the python and OS version)

````
python3 –m venv pixienv 
````
<br>

````
source pixienv/bin/activate
````
Or For Windows
````
pixienv\Scripts\activate
````

<br>

**Step 3. Install from local directory**

```
pip install . 
```

or 

```
pip install –e . 
```

(for development (editable install)) 

or 

Install from distribution files if the user has the wheel file: 

```
pip install dist/guanaco_viz-0.1.0-py3-none-any.whl 
```

<br>

**Step 4. Run GUANACO**

````
nohup guanaco -c your_config.json --backed-mode &  
````

Along with this Json File the user can also mention the following changes, if anything different the user prefers: 

 * `guanaco -h` If the user needs any help
 * `guanaco -d DATA_DIR` If the user doesn’t have their data in the current directory but somewhere else, they can specify using this command: `guanaco -c your_config.json -d your_datadirectory`
 * `guanaco -p PORT` If the user wants to run GUANACO in a different Port than the specified 4399 or run multiple instances of GUANACO simultaneously maybe with different config files, users can run it the following way: `guanaco -c your_2ndconfig.json -p your_newport`. However, make sure this port has been given the permission to be accessed in the security groups.
 * `guanaco --host HOST`  This is not encouraged to use for server as each server comes with a default public IP and also this IP will be used to map any possible web url.
 * `guanaco --debug` If in any case the user wants to understand and/or report any error they face for guanaco. Not recomended for sever 
 * `guanaco --max-cells MAX_CELLS` This is because GUANACO by default, down samples data to only the top 8k cells, however, if the dataset has more than the mentioned number of cells, the user will definitely need to specify the total number of cells here in this format `guanaco -c your_2ndconfig.json --max-cells 10000`, this configuration is done to save memory consumption 
 * `guanaco --seed SEED` Here the seed can be set for sub sampling of the cells
 * `guanaco --backed-mode` For heavy dataset this is recommended, else the app may crash depending on the RAM of the device. However, we would recommend this command for running GUANACO in general more efficiently `guanaco -c your_config.json -d your_datadirectory --backed-mode`. There is no need to use `--max-cells`if GUANACO is run using the `--backed-mode`

   Users can use all the help at once like `guanaco -c your_config.json -d your_datadirectory -p your_newport –seed 10 --backed-mode`. However, the users cannot use just the command `guanaco` to run GUANACO because guanaco needs a config file to run properly.  

<br>

**Or The User can also directly use our already made package** 

````
pip install guanaco 

nohup guanaco -d your_datadirectory -c your_config.json --backed-mode &  
````

**Note:** it is advised to keep the data file and the config file in the same directory in this case


The application will be running in http://<instance-public-ip>:4399/ (or the url the IP is mapped to)

<br>

<div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; align-items: center;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
</div>

<br>

### Running GUANACO with Docker: 
#### Run Locally 

To run and install GUANACO using docker, only changes need to be made in the Json file and the AnnData or MuuData needs to be present in any given folder. There is no need to pull the code from git repository, it will be sufficient to just download the example Json file and create user’s own data. However, if the user has already downloaded the git repository, that is fine as well. The user just needs to use the appropriate folder path. There is no need to install python for docker, if there is an existing python in the machine, it is alright but not something necessary. Users can simply follow the mentioned steps using their terminal: 

<br>

**Step 1. Install Docker**

(Ignore this part if docker is already installed in the machine)

Install Docker in the local machine following the link: https://www.docker.com/products/docker-desktop/,  

(For Linux the user can also use the following command: `sudo apt install -y docker.io`) 

Once docker is installed and running, the user can check the docker version by using this command: `docker --version`

<br>

Step 2. Run Docker Image 

Note: we have already built the docker image for GUANACO, user only needs to mount their data and Json file with the docker image, and it will be running fine, please follow the command precisely below. 

```
docker run -p 8080:8080 \ 
-v {directory of your data}:/app/data \ 
-v {your json file}.json:/app/config.json \ 
systemimmunometabolism/guanaco 
```

We have provided an example below of how it can be done in the user local machine, however, please do not strictly follow the example, it is just for understanding: 

*docker run -p 8080:8080 \  
-v ~/Downloads:/app/data \  
-v ~/Downloads/guanaco.json:/app/config.json \  
systemimmunometabolism/guanaco* 

Here, the user does not have to name the data file only mapping it will be enough 

The application will be running in http://0.0.0.0:8080/ 


<div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; align-items: center;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
</div>

<br>

#### Deploy in Server

To run and install GUANACO using docker, only changes need to be made in the Json file and the AnnData or MuuData needs to be present in any given folder. There is no need to pull the code from git repository, it will be sufficient to just download the example Json file and create user’s own data. However, if the user has already downloaded the git repository, that is fine as well. The user just needs to use the appropriate folder path. There is no need to install python for docker, if there is an existing python in the machine, it is alright but not something necessary. Users can simply follow the mentioned steps using their terminal. 

Please note that the user must connect to their server for deployment. Connection can be made to the server using the following command (this depends completely on the server) 

`ssh -i ~/filepath/my-aws-key.pem instance-name@<EC2_PUBLIC_IP>`

**Note:** The instance name is mostly the name of the OS image used for the server like ubuntu or ec2-user for linux, in this case ubuntu is much preferable as it comes with updated version of python, however this again depends on the server operator 


**Step 1. Install Docker** 

(Ignore this part if docker is already installed in the machine) 

Users can Install Docker in the virtual machine using this command: 

```
sudo apt update 
sudo apt install -y docker.io 
```

Or the user can follow the instruction given by docker for setup in https://docs.docker.com/engine/install/ubuntu/ 

Once docker is installed run the following commands to start docker: 

```
sudo systemctl enable docker 
sudo systemctl start docker 
```

Add docker to user group using this command (this is not necessary but is just for convenience) 

```
sudo usermod -aG docker $USER 
```

Test docker setup by  

```
docker run hello-world 
````

Or, if docker is not added to user group

```
sudo docker run hello-world  
```

**Step 2. Run Docker Image** 

**Note:** We have already built the docker image for GUANACO, user only needs to mount their data and Json file with the docker image, and it will be running fine, please follow the command precisely below. 

To mount the Json file and data in the server, upload the files to the server using the command: 
`scp -i /path/to/your-key.pem /path/to/your/file/guanaco.json ubuntu@EC2_PUBLIC_IP:/home/ubuntu/` 

Once the files are uploaded, run the following command: 

```
docker run -p 8080:8080 \ 
-v {directory of your data}:/app/data \ 
-v {your json file}.json:/app/config.json \ 
systemimmunometabolism/guanaco 
```

Or, if docker is not added to user group

```
sudo docker run -p 8080:8080 \ 
-v {directory of your data}:/app/data \ 
-v {your json file}.json:/app/config.json \ 
systemimmunometabolism/guanaco 
```

The application will be running in http:// <instance-public-ip>:8080/ (or the url the IP is mapped to)

<br>

<div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; align-items: center;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
  <img src="assets/footprint.png" style="max-width: 100%; height: auto; width: 250px;">
</div>
<br>

<div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 5px; align-items: center;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
  <img src="assets/GUANACOs.png" style="width: 50px; height: auto;">
</div>


